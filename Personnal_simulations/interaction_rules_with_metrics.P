% MulVAL interaction rules for Linux with metric definitions
% Author : Xinming Ou, Su Zhang
% Copyright (C) 2011, Argus Cybersecurity Lab, Kansas State University

% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(inCompetent(_principal)).
primitive(competent(_principal)).
primitive(clientProgram(_host, _programname)).
primitive(vulExists(_host, _vulID, _program)).
primitive(vulProperty(_vulID, _range, _consequence)).
primitive(vulProperty(_vulID, _range, _consequence, _port, _prot)).
primitive(hacl(_src, _dst, _prot, _port)).
primitive(attackerLocated(_host)).
primitive(hasAccount(_principal, _host, _account)).
primitive(networkServiceInfo(_host, _program, _user)).
primitive(setuidProgramInfo(_host, _program, _owner)).
primitive(nfsExportInfo(_server, _path, _access, _client)).
primitive(nfsMounted(_client, _clientpath, _server, _serverpath, _access)).
primitive(localFileProtection(_host, _user, _access, _path)).
primitive(dependsOn(_h, _program, _library)).
primitive(installed(_h, _program)).
primitive(isWebServer(_host)).
primitive(isUserMachine(_host)).
primitive(canAccessFile(_host, _user, _access, _path)).
primitive(userDefined(_user, _dc, _perm)).
primitive(hostDefined(_host, _dc)).
primitive(rdpEnabled(_host)).
primitive(userPartOf(_user, _host, _group)).
primitive(weakPassword(_user)).
primitive(credentialInClear(_user, _host, _service)).
primitive(isRuning(_service, _host)).
primitive(hostProperty(_host, _property, _value)).
primitive(isConnected(_user, _host)).
primitive(userAdminOf(_user, _host)).
primitive(accessibleHash(_user, _service, _where)).
primitive(fileOnHost(_file, _host)).
primitive(amsiBypass(_host)).


derived(execCode(_host, _user)).
derived(netAccess(_machine)).
derived(canAccessHost(_host)).
derived(accessFile(_machine,_access,_filepath)).
derived(logInService(_host, _protocol, _port)).
derived(accessMaliciousInput(_host, _principal, _program)).
derived(userFound(_user, _domain)).
derived(vulnExists(_machine,_vulID,_program,_range,_consequence)).
derived(stolenCredential(_user, _service)).
derived(stolenCredential(_user, _host)).
derived(stolenCredential(_user, _domain)).
derived(dnsPoisoning(_host)).
derived(relayWPAD(_host)).
derived(stolenHash(_user, _service)).
derived(hashFoundNTLM(_user)).


meta(cvss(_vulID, _ac)).
primitive(cvss(_vulID, _ac)).
meta(attackGoal(_)).
/* meta(advances(_, _)). */

/******************************************************/
/*             Tabling Predicates                     */
/*   All derived predicates should be tabled          */
/******************************************************/

:- table execCode/2.
:- table netAccess/1.
:- table canAccessHost/1.
:- table canAccessFile/4.
:- table accessFile/3.
:- table vulnExists/5.
:- table logInService/3.

/* Add more tabled predicates here */
:- table userFound/2.
:- table hasAccount/3.
:- table userDefined/3.
:- table hostDefined/2.
:- table rdpEnabled/1.
:- table userPartOf/2.
:- table hashFoundNTLM/2.
:- table weakPassword/1.
:- table credentialInClear/3.
:- table stolenHash/2.



/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/

/****** Section execCode *******/
/*
interaction_rule(
   (execCode(H, Perm) :-
	hasAccount(P, H, Perm)),
   rule_desc('Insider threat', 'possible')).
*/

interaction_rule(
   (execCode(Host, Perm) :-
	stolenCredential(Victim, windows) ,
	hasAccount(Victim, Host, Perm),
	canAccessHost(Host)),
   rule_desc('When a principal is compromised any machine he has an account on will also be compromised',
             'likely')).

interaction_rule(
  (execCode(Host, root) :-
	execCode(Host, _Perm2),
	vulnExists(Host, VulID, Software, localExploit, privEscalation),
	cvss(VulID, AC)),
  rule_desc('local exploit',
            cvss_ac(AC))).

interaction_rule(
  (execCode(H, Perm) :-
	vulnExists(H, VulID, Software, remoteExploit, privEscalation),
        cvss(VulID, AC),
	networkServiceInfo(H, Software, Perm),
	netAccess(H)),
  rule_desc('remote exploit of a server program',
            cvss_ac(AC))).

interaction_rule(
  (execCode(H, Perm) :-
        vulnExists(H, VulID, Software, remoteClient, privEscalation),
	cvss(VulID, AC),
	hasAccount(Victim, H, Perm),
        accessMaliciousInput(H, Victim, Software)),
  rule_desc('remote exploit of a client program',
            cvss_ac(AC))).

interaction_rule(
  (execCode(H, root) :-
	accessFile(H, write, _Path)),
  rule_desc('Trojan horse installation',
            'possible')).

/* Singleton variable at head
interaction_rule(
 (execCode( Attacker, Host, _) :-
   execCode(Attacker, Host, root)),
  'execution at any level if root execution').
*/



/******** Section netAccess ********/
/* accessing a host through network according to a hacl policy.
   For now we assume that every user on a local
   machine has access to network. this may change
   later. */

interaction_rule(
  (netAccess(H) :-
	attackerLocated(Zone),
	hacl(Zone, H, Protocol, Port)),
  rule_desc('direct network access',
            'certain')).
/* 
interaction_rule(
  (netAccess(H, Protocol, Port) :-
	attackerLocated(H)),
  rule_desc('direct on-host access',
            'certain')). */


/****** Section canAccessHost ******/
interaction_rule(
  (canAccessHost(H) :-
	execCode(H, _Perm)),
  rule_desc('Access a host through executing code on the machine',
            'certain')).

interaction_rule(
  (canAccessHost(H) :-
	logInService(H, Protocol, Port),
	netAccess(H)),
  rule_desc('Access a host through a log-in service',
            'certain')).


/******** Section accessFile ********/
interaction_rule(
  (accessFile(H, Access, Path) :-
	execCode(H, Usr),
	canAccessFile(H, Usr, Access, Path)),
  rule_desc('execCode implies file access',
            'certain')).


/****** Section stolenCredential for windows ******/
interaction_rule(
  (stolenCredential(Victim, windows)  :-
	hasAccount(Victim, H, _Perm),
	execCode(H, root)),
  rule_desc('password sniffing',
            'likely')).



/********************************************************/
/*      Software specific knowledge                     */
/********************************************************/

/***************** Section ssh **********************/
interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, sshd, _)),
  rule_desc('SSH is a login service', 'certain')).

interaction_rule(
  (logInService(H, Protocol, Port) :-
	networkServiceInfo(H, vpnService, _)),
  rule_desc('VPN is a login service', 'certain')).


/**************** Section  nfs *****************/
/* Principal P can access files on a NFS server if the files
   on the server are mounted at a client and he can access the
   files on the client side */
interaction_rule(
  (accessFile(Server, Access, ServerPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, Access),
	accessFile(Client, Access, ClientPath)),
  rule_desc('NFS semantics', 'certain')).


/* Principal P can access files on a NFS client if the files
   on the server are mounted at the client and he can access the
   files on the server side */
interaction_rule(
  (accessFile(Client, Access, ClientPath) :-
	nfsMounted(Client, ClientPath, Server, ServerPath, read),
	accessFile(Server, Access, ServerPath)),
  rule_desc('NFS semantics', 'certain')).


interaction_rule(
  (accessFile(Server, Access, Path) :-
	execCode(Client, _User),
    	nfsExportInfo(Server, Path, Access, Client),
    	hacl(Client, Server, nfsProtocol, nfsPort)),
  rule_desc('NFS shell', 'likely')).


interaction_rule(
  (canAccessFile(H, Usr, Acc, Path) :-
	localFileProtection(H, Usr, Acc, Path)),
  rule_desc('file system access control', 'certain')).


interaction_rule((vulnExists(H, ID, Sw, Range, Consequence):-
	        vulExists(H, ID, Sw),
		vulProperty(ID, Range, Consequence)),
             rule_desc('Vuln declared', 'certain')).

interaction_rule((vulnExists(H, ID, Sw, Range, Consequence):-
	        vulnExists(H, ID, Library, Range, Consequence),
		dependsOn(H, Sw, Library)),
             rule_desc('Library bug', 'certain')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 'likely')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     competent(Victim),
     hacl(H, MaliciousMachine, httpProtocol, httpPort),
     attackerLocated(MaliciousMachine)),
  rule_desc('Browsing a malicious website', 'unlikely')).

interaction_rule(
   (accessMaliciousInput(H, Victim, Software) :-
     inCompetent(Victim),
     isWebServer(CompromisedMachine),
     hacl(H, CompromisedMachine, httpProtocol, httpPort),
     execCode(CompromisedMachine, _)),
  rule_desc('Browsing a compromised website', 'possible')).

/*
interaction_rule(
   (canAccessMaliciousInput(H, Victim, EmailClientSoftware) :-
     inCompetent(Victim),
     isEmailClient(EmailClientSoftware),
     isEmailServer(EmailServerSoftware),
     isUserMachine(H),
     hacl(H, EmailServer, EmailProtocol, EmailPort),
     networkServiceInfo(EmailServer, EmailServerSoftware,
                                EmailProtocol, EmailPort, _Perm)),
   rule_desc('receive an email message', 'possible')).
*/


/******************************************************/
/****         More Interaction Rules here         *****/
/******************************************************/

/* Rules for part 2 */
interaction_rule(
    (userFound(USER, Domain) :-
      userDefined(USER, Domain , _Perm),
      netAccess(DC),
      vulnExists(DC, VulID, Domain, remoteExploit, accountEnumeration),
      cvss(VulID, AC)),
    rule_desc('User enumeration anonymously part2', 
        cvss_ac(AC))).

interaction_rule(
    (userFound(USER, Domain) :-
      userDefined(USER, Domain , _Perm),
      netAccess(Domain)), /* On est obligé de mettre Domain au debut pour ne pas multiplier les sourecs d'attaque */
    rule_desc('Username found by brutforce', 'unlikely')).

interaction_rule(
    (stolenCredential(USER, Domain)  :-
      userFound(USER, Domain),
      inCompetent(USER)),
    rule_desc('password is user or in user description', 'likely')).

interaction_rule(
    (stolenHash(User, Domain) :-
      accessibleHash(User, Domain, asreproasting),
      netAccess(Domain),
      userFound(User, Domain)),
    rule_desc('asreproasting part2', 'likely')).

interaction_rule(
    (stolenCredential(User, Service) :-
      stolenHash(User, Service),
      weakPassword(User)),
    rule_desc('Use of Hashcat for password crack', 'likely')).


/* Rules for part 3 */
interaction_rule(
    (userFound(USER, Domain) :-
      userDefined(USER, Domain , _Perm),
      stolenCredential(USER1, Domain),
      netAccess(Domain)), 
    rule_desc('Username found after authentification', 'certain')). /* part 3 on peut meme requeter les domaines joints */

interaction_rule(
    (stolenHash(User, Domain) :-
      accessibleHash(User, Domain, kerberoasting),
      netAccess(Domain),
      stolenCredential(User1, Domain)),
    rule_desc('Kerberoasting part3', 'likely')).



/* Rules for part 4 */
interaction_rule(
    (hashFoundNTLM(User) :-
      userPartOf(User, runNTLMBot, user),
      isRuning(ntlmBot, H),
      netAccess(H)),
    rule_desc('NTLM hash found', 'likely')).

interaction_rule(
    (hasAccount(User, Host, Perm) :-
      userDefined(User, DC, Perm),
      hostDefined(Host, DC)),
    rule_desc('User defined', 'certain')).

interaction_rule(
    (stolenCredential(USER, Domain)  :-
      userFound(USER, Domain),
      weakPassword(USER),
      hashFoundNTLM(USER)),
    rule_desc('weak password crack', 'likely')).


interaction_rule(
    (execCode(USER, HOST, Perm) :-
      hasAccount(USER, HOST, Perm),
      stolenCredential(USR, windows),
      hostDefined(HOST, DC),
      netAccess(DC),
      rdpEnabled(HOST)),
    rule_desc('RDP access', 'certain')).

interaction_rule(
    (stolenCredential(User, Service) :-
      credentialInClear(User, H, Service),
      netAccess(H)),
    rule_desc('Use of DonPAPI', 'likely')).

/* interaction_rule(
    (stolenHash(User, H) :-
      hostProperty(H, signedSMB, false),
      isConnected(User2, H),
      userAdminOf(User2, H),
      userDefined(User, H, _Perm),
      netAccess(H)),
    rule_desc('Use a socks relay with an admin account / part 4', 'likely')). */

interaction_rule(
    (isConnected(User, H) :-
      hostDefined(H, DC),
      userDefined(User, DC, _Perm)),
    rule_desc('Use a socks relay with an admin account / part 4', 'unlikely')).

interaction_rule(
    (userAdminOf(User, H) :-
      userDefined(User, DC, domain_admin),
      hostDefined(H, DC)),
    rule_desc('Un admin de domain est admin local des machines du domain', 'certain')).

interaction_rule(
    (dnsPoisoning(Host) :-
      hostProperty(Host, automaticDNS, true),
      netAccess(Host)),
    rule_desc('dns Poisoning', 'likely')).

interaction_rule(
    (relayWPAD(Host) :-
      dnsPoisoning(Host),
      netAccess(Host)),
    rule_desc('relay the wpad http query to the ldaps', 'likely')). /* part 4 */

interaction_rule(
    (hostDefined(Host, DC) :-
      hostDefined(Host1, DC),
      relayWPAD(Host1),
      userAdminOf(attacker, Host)),
    rule_desc('relay the wpad http query to the ldaps', 'likely')). /* part 4 à voir parce qu'en vrai il prend l'identité d'un autre */

interaction_rule(
    (accessFile(Host, read, File) :-
      vulnExists(Host, VulID, _program, remoteExploit, fileAccess),
      fileOnHost(File, Host),
      cvss(VulID, AC),
      stolenCredential(User, DC),
      hostDefined(Host, DC)),
    rule_desc('remote access file exploit',
            cvss_ac(AC))).

interaction_rule(
    (stolenHash(User, Service) :-
      vulnExists(Host, VulID, _program, remoteExploit, accessLocalHash),
      accessibleHash(User, Service, Host),
      cvss(VulID, AC),
      netAccess(Host)),
    rule_desc('remote access hash',
            cvss_ac(AC))).

interaction_rule(
    (amsiBypass(Host) :-
      netAccess(Host)),
    rule_desc('amsi Bypass', 'likely')).

interaction_rule(
    (stolenHash(User, Service) :-
      accessibleHash(User, Service, Host),
      userAdminOf(User1, Host),
      stolenCredential(User1, Domain),
      hostDefined(Host, Domain),
      netAccess(Host)),
    rule_desc('secretsdump as local admin', 'certain')).

interaction_rule(
    (userAdminOf(User, Host) :-
      userPartOf(User, Host, admin)),
    rule_desc('User is admin', 'certain')).

/* interaction_rule(
    (stolenCredential(User, Host) :-
      stolenCredential(User, Domain),
      hostDefined(Host, Domain)),
    rule_desc('Host is on the domain', 'certain')). */

interaction_rule(
    (accessibleHash(User, Host, Host) :-
      userDefined(User, Host, _Perm),
      hostDefined(Host, DC)),
    rule_desc('les hash des comptes locaux sont sur la machine', 'certain')).
    